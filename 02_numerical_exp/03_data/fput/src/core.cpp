
// ==============================================================================
// 
// Copyright or © or Copr:
//     Antoine Falaize
// 
// Affiliation:
//     Team M2N (Mathematical and Numerical Methods),
//     Laboratoire des Sciences de l'Ingénieur pour l'Environnement (LaSIE),
//     UMR CNRS 7356, La Rochelle Université,
//     La Rochelle, France.
// 
// Contact:
//     antoine.falaize@univ-lr.fr
// 
// This file has been generated by the Python software PyPHS, which purpose
// is to model and simulate multiphysical systems in the Port-Hamiltonian
// formalism. See the website at the following url:
// "https://pyphs.github.io/pyphs/".
// 
// Created on:
//     2020/07/20 10:29:44
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// A copy of the GNU General Public License is available at the following url:
// "https://www.gnu.org/licenses/"
// 
// ==============================================================================
#include "core.h"
//==========================================================================
// PUBLIC    
    //==========================================================================
    // Sample Rate
    void FPUT::set_sampleRate(float & value) {
        sampleRate = value;
        init();
    }
    void FPUT::set_sampleRate(double & value) {
        sampleRate = value;
        init();
    }
    //==========================================================================
    // Core update
    void FPUT::update(){    
        ud_x_update();
        set_x(_ud_x);
        ud_o_update();
        set_o(_ud_o);
        Gnl_update();
        Fnl_update();
        res_Fnl_update();    
        unsigned int iter_res_Fnl = 0;
        _step_Fnl = 1;
        while ((iter_res_Fnl<10) & (res_Fnl()>2.220446049250313e-16) & (step_Fnl()>2.220446049250313e-16)){    
            save_Fnl_update();
            jacGnlnl_update();
            jacFnl_update();
            ijacFnl_update();
            ud_vnl_update();
            set_vnl(_ud_vnl);
            Gnl_update();
            Fnl_update();
            res_Fnl_update();
            step_Fnl_update();iter_res_Fnl += 1;
        }    
        dxH_update();
        z_update();
        y_update();
    }
    //==========================================================================
    // Acessors to Arguments, return vector<double>
    const vector<double> & FPUT::x_vector() const {    
        static vector<double> v = vector<double>(9);    
        v[0] = *Pi_L1;    
        v[1] = *Pi_12;    
        v[2] = *Pi_23;    
        v[3] = *Pi_34;    
        v[4] = *Pi_R4;    
        v[5] = *x_k1;    
        v[6] = *x_k2;    
        v[7] = *x_k3;    
        v[8] = *x_k4;    
        return v;
    }
    const vector<double> & FPUT::dx_vector() const {    
        static vector<double> v = vector<double>(9);    
        v[0] = *dPi_L1;    
        v[1] = *dPi_12;    
        v[2] = *dPi_23;    
        v[3] = *dPi_34;    
        v[4] = *dPi_R4;    
        v[5] = *dx_k1;    
        v[6] = *dx_k2;    
        v[7] = *dx_k3;    
        v[8] = *dx_k4;    
        return v;
    }
    const vector<double> & FPUT::w_vector() const {    
        static vector<double> v = vector<double>(0);    
        return v;
    }
    const vector<double> & FPUT::u_vector() const {    
        static vector<double> v = vector<double>(0);    
        return v;
    }
    const vector<double> & FPUT::p_vector() const {    
        static vector<double> v = vector<double>(0);    
        return v;
    }
    const vector<double> & FPUT::vnl_vector() const {    
        static vector<double> v = vector<double>(9);    
        v[0] = *dPi_L1;    
        v[1] = *dPi_12;    
        v[2] = *dPi_23;    
        v[3] = *dPi_34;    
        v[4] = *dPi_R4;    
        v[5] = *dx_k1;    
        v[6] = *dx_k2;    
        v[7] = *dx_k3;    
        v[8] = *dx_k4;    
        return v;
    }
    const vector<double> & FPUT::o_vector() const {    
        static vector<double> v = vector<double>(6);    
        v[0] = *RHS_1;    
        v[1] = *RHS_2;    
        v[2] = *RHS_3;    
        v[3] = *Delta_12;    
        v[4] = *Delta_23;    
        v[5] = *Delta_34;    
        return v;
    }
    //==========================================================================
    // Acessors to Arguments, return Matrix<double, n, m>
    const Matrix<double,9, 1> & FPUT::x() const {    
        static Matrix<double,9, 1> m;    
        m(0, 0) = *Pi_L1;    
        m(1, 0) = *Pi_12;    
        m(2, 0) = *Pi_23;    
        m(3, 0) = *Pi_34;    
        m(4, 0) = *Pi_R4;    
        m(5, 0) = *x_k1;    
        m(6, 0) = *x_k2;    
        m(7, 0) = *x_k3;    
        m(8, 0) = *x_k4;    
        return m;
    }
    const Matrix<double,9, 1> & FPUT::dx() const {    
        static Matrix<double,9, 1> m;    
        m(0, 0) = *dPi_L1;    
        m(1, 0) = *dPi_12;    
        m(2, 0) = *dPi_23;    
        m(3, 0) = *dPi_34;    
        m(4, 0) = *dPi_R4;    
        m(5, 0) = *dx_k1;    
        m(6, 0) = *dx_k2;    
        m(7, 0) = *dx_k3;    
        m(8, 0) = *dx_k4;    
        return m;
    }
    const Matrix<double,0, 0> & FPUT::w() const {    
        static Matrix<double,0, 0> m;    
        return m;
    }
    const Matrix<double,0, 0> & FPUT::u() const {    
        static Matrix<double,0, 0> m;    
        return m;
    }
    const Matrix<double,0, 0> & FPUT::p() const {    
        static Matrix<double,0, 0> m;    
        return m;
    }
    const Matrix<double,9, 1> & FPUT::vnl() const {    
        static Matrix<double,9, 1> m;    
        m(0, 0) = *dPi_L1;    
        m(1, 0) = *dPi_12;    
        m(2, 0) = *dPi_23;    
        m(3, 0) = *dPi_34;    
        m(4, 0) = *dPi_R4;    
        m(5, 0) = *dx_k1;    
        m(6, 0) = *dx_k2;    
        m(7, 0) = *dx_k3;    
        m(8, 0) = *dx_k4;    
        return m;
    }
    const Matrix<double,6, 1> & FPUT::o() const {    
        static Matrix<double,6, 1> m;    
        m(0, 0) = *RHS_1;    
        m(1, 0) = *RHS_2;    
        m(2, 0) = *RHS_3;    
        m(3, 0) = *Delta_12;    
        m(4, 0) = *Delta_23;    
        m(5, 0) = *Delta_34;    
        return m;
    }
    //==========================================================================
    // Mutators for Arguments, type = vector<double>
    void FPUT::set_x(const vector<double> & v) {
        *Pi_L1 = v[0];
        *Pi_12 = v[1];
        *Pi_23 = v[2];
        *Pi_34 = v[3];
        *Pi_R4 = v[4];
        *x_k1 = v[5];
        *x_k2 = v[6];
        *x_k3 = v[7];
        *x_k4 = v[8];
    }
    void FPUT::set_dx(const vector<double> & v) {
        *dPi_L1 = v[0];
        *dPi_12 = v[1];
        *dPi_23 = v[2];
        *dPi_34 = v[3];
        *dPi_R4 = v[4];
        *dx_k1 = v[5];
        *dx_k2 = v[6];
        *dx_k3 = v[7];
        *dx_k4 = v[8];
    }
    void FPUT::set_w(const vector<double> & v) {
    }
    void FPUT::set_u(const vector<double> & v) {
    }
    void FPUT::set_p(const vector<double> & v) {
    }
    void FPUT::set_vnl(const vector<double> & v) {
        *dPi_L1 = v[0];
        *dPi_12 = v[1];
        *dPi_23 = v[2];
        *dPi_34 = v[3];
        *dPi_R4 = v[4];
        *dx_k1 = v[5];
        *dx_k2 = v[6];
        *dx_k3 = v[7];
        *dx_k4 = v[8];
    }
    void FPUT::set_o(const vector<double> & v) {
        *RHS_1 = v[0];
        *RHS_2 = v[1];
        *RHS_3 = v[2];
        *Delta_12 = v[3];
        *Delta_23 = v[4];
        *Delta_34 = v[5];
    }
    //==========================================================================
    // Mutators for Arguments, type = Matrix<double, n, m>
    void FPUT::set_x(const Matrix<double, 9, 1> & m) {
        *Pi_L1 = m(0, 0);
        *Pi_12 = m(1, 0);
        *Pi_23 = m(2, 0);
        *Pi_34 = m(3, 0);
        *Pi_R4 = m(4, 0);
        *x_k1 = m(5, 0);
        *x_k2 = m(6, 0);
        *x_k3 = m(7, 0);
        *x_k4 = m(8, 0);
    }
    void FPUT::set_dx(const Matrix<double, 9, 1> & m) {
        *dPi_L1 = m(0, 0);
        *dPi_12 = m(1, 0);
        *dPi_23 = m(2, 0);
        *dPi_34 = m(3, 0);
        *dPi_R4 = m(4, 0);
        *dx_k1 = m(5, 0);
        *dx_k2 = m(6, 0);
        *dx_k3 = m(7, 0);
        *dx_k4 = m(8, 0);
    }
    void FPUT::set_w(const Matrix<double, 0, 0> & m) {
    }
    void FPUT::set_u(const Matrix<double, 0, 0> & m) {
    }
    void FPUT::set_p(const Matrix<double, 0, 0> & m) {
    }
    void FPUT::set_vnl(const Matrix<double, 9, 1> & m) {
        *dPi_L1 = m(0, 0);
        *dPi_12 = m(1, 0);
        *dPi_23 = m(2, 0);
        *dPi_34 = m(3, 0);
        *dPi_R4 = m(4, 0);
        *dx_k1 = m(5, 0);
        *dx_k2 = m(6, 0);
        *dx_k3 = m(7, 0);
        *dx_k4 = m(8, 0);
    }
    void FPUT::set_o(const Matrix<double, 6, 1> & m) {
        *RHS_1 = m(0, 0);
        *RHS_2 = m(1, 0);
        *RHS_3 = m(2, 0);
        *Delta_12 = m(3, 0);
        *Delta_23 = m(4, 0);
        *Delta_34 = m(5, 0);
    }
    //==========================================================================
    // Mutators for a single argument, types are double with int index
    void FPUT::set_x(const double & value, unsigned int & index) {
        if(index == 0) {
            *Pi_L1 = value;
        }
        if(index == 1) {
            *Pi_12 = value;
        }
        if(index == 2) {
            *Pi_23 = value;
        }
        if(index == 3) {
            *Pi_34 = value;
        }
        if(index == 4) {
            *Pi_R4 = value;
        }
        if(index == 5) {
            *x_k1 = value;
        }
        if(index == 6) {
            *x_k2 = value;
        }
        if(index == 7) {
            *x_k3 = value;
        }
        if(index == 8) {
            *x_k4 = value;
        }
    }
    void FPUT::set_dx(const double & value, unsigned int & index) {
        if(index == 0) {
            *dPi_L1 = value;
        }
        if(index == 1) {
            *dPi_12 = value;
        }
        if(index == 2) {
            *dPi_23 = value;
        }
        if(index == 3) {
            *dPi_34 = value;
        }
        if(index == 4) {
            *dPi_R4 = value;
        }
        if(index == 5) {
            *dx_k1 = value;
        }
        if(index == 6) {
            *dx_k2 = value;
        }
        if(index == 7) {
            *dx_k3 = value;
        }
        if(index == 8) {
            *dx_k4 = value;
        }
    }
    void FPUT::set_w(const double & value, unsigned int & index) {
    }
    void FPUT::set_u(const double & value, unsigned int & index) {
    }
    void FPUT::set_p(const double & value, unsigned int & index) {
    }
    void FPUT::set_vnl(const double & value, unsigned int & index) {
        if(index == 0) {
            *dPi_L1 = value;
        }
        if(index == 1) {
            *dPi_12 = value;
        }
        if(index == 2) {
            *dPi_23 = value;
        }
        if(index == 3) {
            *dPi_34 = value;
        }
        if(index == 4) {
            *dPi_R4 = value;
        }
        if(index == 5) {
            *dx_k1 = value;
        }
        if(index == 6) {
            *dx_k2 = value;
        }
        if(index == 7) {
            *dx_k3 = value;
        }
        if(index == 8) {
            *dx_k4 = value;
        }
    }
    void FPUT::set_o(const double & value, unsigned int & index) {
        if(index == 0) {
            *RHS_1 = value;
        }
        if(index == 1) {
            *RHS_2 = value;
        }
        if(index == 2) {
            *RHS_3 = value;
        }
        if(index == 3) {
            *Delta_12 = value;
        }
        if(index == 4) {
            *Delta_23 = value;
        }
        if(index == 5) {
            *Delta_34 = value;
        }
    }
    //==========================================================================
    // Functions Results Accessors (matrix)
    const Matrix<double,6, 1> & FPUT::ud_o() const {
        return _ud_o;
    }
    const Matrix<double,9, 1> & FPUT::Gnl() const {
        return _Gnl;
    }
    const Matrix<double,9, 9> & FPUT::jacGnlnl() const {
        return _jacGnlnl;
    }
    const Matrix<double,9, 1> & FPUT::dxH() const {
        return _dxH;
    }
    const Matrix<double,0, 0> & FPUT::z() const {
        return _z;
    }
    const Matrix<double,0, 0> & FPUT::y() const {
        return _y;
    }
    //==========================================================================
    // Functions Results Accessors (vector)
    const vector<double> & FPUT::ud_o_vector() const {    
        static vector<double> v = vector<double>(6);    
        v[0] = _ud_o(0, 0);    
        v[1] = _ud_o(1, 0);    
        v[2] = _ud_o(2, 0);    
        v[3] = _ud_o(3, 0);    
        v[4] = _ud_o(4, 0);    
        v[5] = _ud_o(5, 0);    
        return v;
    }
    const vector<double> & FPUT::Gnl_vector() const {    
        static vector<double> v = vector<double>(9);    
        v[0] = _Gnl(0, 0);    
        v[1] = _Gnl(1, 0);    
        v[2] = _Gnl(2, 0);    
        v[3] = _Gnl(3, 0);    
        v[4] = _Gnl(4, 0);    
        v[5] = _Gnl(5, 0);    
        v[6] = _Gnl(6, 0);    
        v[7] = _Gnl(7, 0);    
        v[8] = _Gnl(8, 0);    
        return v;
    }
    const vector<double> & FPUT::jacGnlnl_vector() const {    
        static vector<double> v = vector<double>(9);    
        v[0] = _jacGnlnl(0, 0);    
        v[1] = _jacGnlnl(1, 0);    
        v[2] = _jacGnlnl(2, 0);    
        v[3] = _jacGnlnl(3, 0);    
        v[4] = _jacGnlnl(4, 0);    
        v[5] = _jacGnlnl(5, 0);    
        v[6] = _jacGnlnl(6, 0);    
        v[7] = _jacGnlnl(7, 0);    
        v[8] = _jacGnlnl(8, 0);    
        return v;
    }
    const vector<double> & FPUT::dxH_vector() const {    
        static vector<double> v = vector<double>(9);    
        v[0] = _dxH(0, 0);    
        v[1] = _dxH(1, 0);    
        v[2] = _dxH(2, 0);    
        v[3] = _dxH(3, 0);    
        v[4] = _dxH(4, 0);    
        v[5] = _dxH(5, 0);    
        v[6] = _dxH(6, 0);    
        v[7] = _dxH(7, 0);    
        v[8] = _dxH(8, 0);    
        return v;
    }
    const vector<double> & FPUT::z_vector() const {    
        static vector<double> v = vector<double>(0);    
        return v;
    }
    const vector<double> & FPUT::y_vector() const {    
        static vector<double> v = vector<double>(0);    
        return v;
    }
    //==========================================================================
    // Functions Results Accessors (element)
    const double & FPUT::ud_o(unsigned int & index) const {    
        return _ud_o(index, 0);
    }
    const double & FPUT::Gnl(unsigned int & index) const {    
        return _Gnl(index, 0);
    }
    const double & FPUT::jacGnlnl(unsigned int & index) const {    
        return _jacGnlnl(index, 0);
    }
    const double & FPUT::dxH(unsigned int & index) const {    
        return _dxH(index, 0);
    }
    const double & FPUT::z(unsigned int & index) const {    
        return _z(index, 0);
    }
    const double & FPUT::y(unsigned int & index) const {    
        return _y(index, 0);
    }
    //==========================================================================
    // Oprations Results Accessors
    const Matrix<double,9, 1> & FPUT::ud_x() const {
        return _ud_x;
    }
    const Matrix<double,9, 1> & FPUT::Fnl() const {
        return _Fnl;
    }
    const Matrix<double,9, 9> & FPUT::jacFnl() const {
        return _jacFnl;
    }
    const Matrix<double,9, 9> & FPUT::ijacFnl() const {
        return _ijacFnl;
    }
    const Matrix<double,9, 1> & FPUT::save_Fnl() const {
        return _save_Fnl;
    }
    const double & FPUT::res_Fnl() const {
        return _res_Fnl;
    }
    const double & FPUT::step_Fnl() const {
        return _step_Fnl;
    }
    const Matrix<double,9, 1> & FPUT::ud_vnl() const {
        return _ud_vnl;
    }
    //==========================================================================
    // Oprations Results Accessors
    vector<double> FPUT::ud_x_vector() const {    
        static vector<double> v = vector<double>(9);    
        v[0] = _ud_x(0, 0);    
        v[1] = _ud_x(1, 0);    
        v[2] = _ud_x(2, 0);    
        v[3] = _ud_x(3, 0);    
        v[4] = _ud_x(4, 0);    
        v[5] = _ud_x(5, 0);    
        v[6] = _ud_x(6, 0);    
        v[7] = _ud_x(7, 0);    
        v[8] = _ud_x(8, 0);    
        return v;
    }
    vector<double> FPUT::Fnl_vector() const {    
        static vector<double> v = vector<double>(9);    
        v[0] = _Fnl(0, 0);    
        v[1] = _Fnl(1, 0);    
        v[2] = _Fnl(2, 0);    
        v[3] = _Fnl(3, 0);    
        v[4] = _Fnl(4, 0);    
        v[5] = _Fnl(5, 0);    
        v[6] = _Fnl(6, 0);    
        v[7] = _Fnl(7, 0);    
        v[8] = _Fnl(8, 0);    
        return v;
    }
    vector<double> FPUT::save_Fnl_vector() const {    
        static vector<double> v = vector<double>(9);    
        v[0] = _save_Fnl(0, 0);    
        v[1] = _save_Fnl(1, 0);    
        v[2] = _save_Fnl(2, 0);    
        v[3] = _save_Fnl(3, 0);    
        v[4] = _save_Fnl(4, 0);    
        v[5] = _save_Fnl(5, 0);    
        v[6] = _save_Fnl(6, 0);    
        v[7] = _save_Fnl(7, 0);    
        v[8] = _save_Fnl(8, 0);    
        return v;
    }
    vector<double> FPUT::ud_vnl_vector() const {    
        static vector<double> v = vector<double>(9);    
        v[0] = _ud_vnl(0, 0);    
        v[1] = _ud_vnl(1, 0);    
        v[2] = _ud_vnl(2, 0);    
        v[3] = _ud_vnl(3, 0);    
        v[4] = _ud_vnl(4, 0);    
        v[5] = _ud_vnl(5, 0);    
        v[6] = _ud_vnl(6, 0);    
        v[7] = _ud_vnl(7, 0);    
        v[8] = _ud_vnl(8, 0);    
        return v;
    }
    //==========================================================================
    // Default Constructor
    FPUT::FPUT(){    
        //==========================================================================
        // Functions Results Initialisation Data
        double ud_o_data[] = {0., 0., 0., 0., 0., 0.};
        double Gnl_data[] = {0., 0., 0., 0., 0., 0., 0., 0., 0.};
        double jacGnlnl_data[] = {(*F_S), 0., 0., 0., 0., 0., 0., 0., 0., 0., (*F_S), 0., 0., 0., 0., 0., 0., 0., 0., 0., (*F_S), 0., 0., 0., 0., 0., 0., 0., 0., 0., (*F_S), 0., 0., 0., 0., 0., 0., 0., 0., 0., (*F_S), 0., 0., 0., 0., 0., 0., 0., 0., 0., (*F_S), 0., 0., 0., 0., 0., 0., 0., 0., 0., (*F_S), 0., 0., 0., 0., 0., 0., 0., 0., 0., (*F_S), 0., 0., 0., 0., 0., 0., 0., 0., 0., (*F_S)};
        double dxH_data[] = {0., 0., 0., 0., 0., 0., 0., 0., 0.};
        double z_data[] = {};
        double y_data[] = {};    
        //==========================================================================
        // Functions Results Initialisation    
        _ud_o = Map<Matrix<double,6, 1>> (ud_o_data);    
        _Gnl = Map<Matrix<double,9, 1>> (Gnl_data);    
        _jacGnlnl = Map<Matrix<double,9, 9>> (jacGnlnl_data);    
        _dxH = Map<Matrix<double,9, 1>> (dxH_data);    
        _z = Map<Matrix<double,0, 0>> (z_data);    
        _y = Map<Matrix<double,0, 0>> (y_data);    
        //==========================================================================
        // Initialization    
        init();
    };
    //==========================================================================
    // Default Destructor
    FPUT::~FPUT(){
    };

//==========================================================================
// PRIVATE    
    //==========================================================================
    // Functions Results Updates
    void FPUT::ud_o_update(){
    _ud_o(0, 0) = (*Pi_12)*((1.0/2.0)/(*m_R1) - 1.0/2.0/(*m_L2));
    _ud_o(1, 0) = (*Pi_23)*((1.0/2.0)/(*m_R2) - 1.0/2.0/(*m_L3));
    _ud_o(2, 0) = (*Pi_34)*((1.0/2.0)/(*m_R3) - 1.0/2.0/(*m_L4));
    _ud_o(3, 0) = (*RHS_1);
    _ud_o(4, 0) = (*RHS_2);
    _ud_o(5, 0) = (*RHS_3);
    };
    void FPUT::Gnl_update(){
    _Gnl(0, 0) = (*F_S)*(*dPi_L1) - (((*dx_k1) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_1)*pow((*x_k1), 2) + (1.0/2.0)*(*k_1)*pow((*dx_k1) + (*x_k1), 2))/(*dx_k1)
    )
    : (((*dx_k1) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k1)*(*k_1) + (*k_1)*(*x_k1)
    )
    : (
       (-1.0/2.0*(*k_1)*pow((*x_k1), 2) + (1.0/2.0)*(*k_1)*pow((*dx_k1) + (*x_k1), 2))/(*dx_k1)
    )));
    _Gnl(1, 0) = (*F_S)*(*dPi_12) + (((*dx_k1) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_1)*pow((*x_k1), 2) + (1.0/2.0)*(*k_1)*pow((*dx_k1) + (*x_k1), 2))/(*dx_k1)
    )
    : (((*dx_k1) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k1)*(*k_1) + (*k_1)*(*x_k1)
    )
    : (
       (-1.0/2.0*(*k_1)*pow((*x_k1), 2) + (1.0/2.0)*(*k_1)*pow((*dx_k1) + (*x_k1), 2))/(*dx_k1)
    ))) - (((*dx_k2) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_2)*pow((*x_k2), 2) + (1.0/2.0)*(*k_2)*pow((*dx_k2) + (*x_k2), 2))/(*dx_k2)
    )
    : (((*dx_k2) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k2)*(*k_2) + (*k_2)*(*x_k2)
    )
    : (
       (-1.0/2.0*(*k_2)*pow((*x_k2), 2) + (1.0/2.0)*(*k_2)*pow((*dx_k2) + (*x_k2), 2))/(*dx_k2)
    )));
    _Gnl(2, 0) = (*F_S)*(*dPi_23) + (((*dx_k2) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_2)*pow((*x_k2), 2) + (1.0/2.0)*(*k_2)*pow((*dx_k2) + (*x_k2), 2))/(*dx_k2)
    )
    : (((*dx_k2) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k2)*(*k_2) + (*k_2)*(*x_k2)
    )
    : (
       (-1.0/2.0*(*k_2)*pow((*x_k2), 2) + (1.0/2.0)*(*k_2)*pow((*dx_k2) + (*x_k2), 2))/(*dx_k2)
    ))) - (((*dx_k3) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_3)*pow((*x_k3), 2) + (1.0/2.0)*(*k_3)*pow((*dx_k3) + (*x_k3), 2))/(*dx_k3)
    )
    : (((*dx_k3) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k3)*(*k_3) + (*k_3)*(*x_k3)
    )
    : (
       (-1.0/2.0*(*k_3)*pow((*x_k3), 2) + (1.0/2.0)*(*k_3)*pow((*dx_k3) + (*x_k3), 2))/(*dx_k3)
    )));
    _Gnl(3, 0) = (*F_S)*(*dPi_34) + (((*dx_k3) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_3)*pow((*x_k3), 2) + (1.0/2.0)*(*k_3)*pow((*dx_k3) + (*x_k3), 2))/(*dx_k3)
    )
    : (((*dx_k3) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k3)*(*k_3) + (*k_3)*(*x_k3)
    )
    : (
       (-1.0/2.0*(*k_3)*pow((*x_k3), 2) + (1.0/2.0)*(*k_3)*pow((*dx_k3) + (*x_k3), 2))/(*dx_k3)
    ))) - (((*dx_k4) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_4)*pow((*x_k4), 2) + (1.0/2.0)*(*k_4)*pow((*dx_k4) + (*x_k4), 2))/(*dx_k4)
    )
    : (((*dx_k4) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k4)*(*k_4) + (*k_4)*(*x_k4)
    )
    : (
       (-1.0/2.0*(*k_4)*pow((*x_k4), 2) + (1.0/2.0)*(*k_4)*pow((*dx_k4) + (*x_k4), 2))/(*dx_k4)
    )));
    _Gnl(4, 0) = (*F_S)*(*dPi_R4) + (((*dx_k4) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_4)*pow((*x_k4), 2) + (1.0/2.0)*(*k_4)*pow((*dx_k4) + (*x_k4), 2))/(*dx_k4)
    )
    : (((*dx_k4) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k4)*(*k_4) + (*k_4)*(*x_k4)
    )
    : (
       (-1.0/2.0*(*k_4)*pow((*x_k4), 2) + (1.0/2.0)*(*k_4)*pow((*dx_k4) + (*x_k4), 2))/(*dx_k4)
    )));
    _Gnl(5, 0) = (*F_S)*(*dx_k1) - (((*dPi_12) < -1.4901161193847656e-8) ? (
       (-pow((*Pi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) - (*Pi_12)*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)) + pow((*Pi_12) + (*dPi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + ((*Pi_12) + (*dPi_12))*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)))/(*dPi_12)
    )
    : (((*dPi_12) < 1.4901161193847656e-8) ? (
       (1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2) + 2*(*Pi_12)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + (*dPi_12)*(0.125/(*m_R1) + 0.125/(*m_L2))
    )
    : (
       (-pow((*Pi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) - (*Pi_12)*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)) + pow((*Pi_12) + (*dPi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + ((*Pi_12) + (*dPi_12))*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)))/(*dPi_12)
    ))) + (((*dPi_L1) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*pow((*Pi_L1), 2)/(*m_L1) + (1.0/2.0)*pow((*Pi_L1) + (*dPi_L1), 2)/(*m_L1))/(*dPi_L1)
    )
    : (((*dPi_L1) < 1.4901161193847656e-8) ? (
       (*Pi_L1)/(*m_L1) + 0.5*(*dPi_L1)/(*m_L1)
    )
    : (
       (-1.0/2.0*pow((*Pi_L1), 2)/(*m_L1) + (1.0/2.0)*pow((*Pi_L1) + (*dPi_L1), 2)/(*m_L1))/(*dPi_L1)
    )));
    _Gnl(6, 0) = (*F_S)*(*dx_k2) + (((*dPi_12) < -1.4901161193847656e-8) ? (
       (-pow((*Pi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) - (*Pi_12)*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)) + pow((*Pi_12) + (*dPi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + ((*Pi_12) + (*dPi_12))*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)))/(*dPi_12)
    )
    : (((*dPi_12) < 1.4901161193847656e-8) ? (
       (1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2) + 2*(*Pi_12)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + (*dPi_12)*(0.125/(*m_R1) + 0.125/(*m_L2))
    )
    : (
       (-pow((*Pi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) - (*Pi_12)*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)) + pow((*Pi_12) + (*dPi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + ((*Pi_12) + (*dPi_12))*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)))/(*dPi_12)
    ))) - (((*dPi_23) < -1.4901161193847656e-8) ? (
       (-pow((*Pi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) - (*Pi_23)*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)) + pow((*Pi_23) + (*dPi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + ((*Pi_23) + (*dPi_23))*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)))/(*dPi_23)
    )
    : (((*dPi_23) < 1.4901161193847656e-8) ? (
       (1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3) + 2*(*Pi_23)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + (*dPi_23)*(0.125/(*m_R2) + 0.125/(*m_L3))
    )
    : (
       (-pow((*Pi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) - (*Pi_23)*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)) + pow((*Pi_23) + (*dPi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + ((*Pi_23) + (*dPi_23))*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)))/(*dPi_23)
    )));
    _Gnl(7, 0) = (*F_S)*(*dx_k3) + (((*dPi_23) < -1.4901161193847656e-8) ? (
       (-pow((*Pi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) - (*Pi_23)*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)) + pow((*Pi_23) + (*dPi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + ((*Pi_23) + (*dPi_23))*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)))/(*dPi_23)
    )
    : (((*dPi_23) < 1.4901161193847656e-8) ? (
       (1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3) + 2*(*Pi_23)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + (*dPi_23)*(0.125/(*m_R2) + 0.125/(*m_L3))
    )
    : (
       (-pow((*Pi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) - (*Pi_23)*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)) + pow((*Pi_23) + (*dPi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + ((*Pi_23) + (*dPi_23))*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)))/(*dPi_23)
    ))) - (((*dPi_34) < -1.4901161193847656e-8) ? (
       (-pow((*Pi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) - (*Pi_34)*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)) + pow((*Pi_34) + (*dPi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + ((*Pi_34) + (*dPi_34))*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)))/(*dPi_34)
    )
    : (((*dPi_34) < 1.4901161193847656e-8) ? (
       (1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4) + 2*(*Pi_34)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + (*dPi_34)*(0.125/(*m_R3) + 0.125/(*m_L4))
    )
    : (
       (-pow((*Pi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) - (*Pi_34)*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)) + pow((*Pi_34) + (*dPi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + ((*Pi_34) + (*dPi_34))*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)))/(*dPi_34)
    )));
    _Gnl(8, 0) = (*F_S)*(*dx_k4) + (((*dPi_34) < -1.4901161193847656e-8) ? (
       (-pow((*Pi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) - (*Pi_34)*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)) + pow((*Pi_34) + (*dPi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + ((*Pi_34) + (*dPi_34))*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)))/(*dPi_34)
    )
    : (((*dPi_34) < 1.4901161193847656e-8) ? (
       (1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4) + 2*(*Pi_34)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + (*dPi_34)*(0.125/(*m_R3) + 0.125/(*m_L4))
    )
    : (
       (-pow((*Pi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) - (*Pi_34)*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)) + pow((*Pi_34) + (*dPi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + ((*Pi_34) + (*dPi_34))*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)))/(*dPi_34)
    ))) - (((*dPi_R4) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*pow((*Pi_R4), 2)/(*m_R4) + (1.0/2.0)*pow((*Pi_R4) + (*dPi_R4), 2)/(*m_R4))/(*dPi_R4)
    )
    : (((*dPi_R4) < 1.4901161193847656e-8) ? (
       (*Pi_R4)/(*m_R4) + 0.5*(*dPi_R4)/(*m_R4)
    )
    : (
       (-1.0/2.0*pow((*Pi_R4), 2)/(*m_R4) + (1.0/2.0)*pow((*Pi_R4) + (*dPi_R4), 2)/(*m_R4))/(*dPi_R4)
    )));
    };
    void FPUT::jacGnlnl_update(){
    _jacGnlnl(0, 5) = -(((*dx_k1) < -1.4901161193847656e-8) ? (
       (1.0/2.0)*(*k_1)*(2*(*dx_k1) + 2*(*x_k1))/(*dx_k1) - (-1.0/2.0*(*k_1)*pow((*x_k1), 2) + (1.0/2.0)*(*k_1)*pow((*dx_k1) + (*x_k1), 2))/pow((*dx_k1), 2)
    )
    : (((*dx_k1) < 1.4901161193847656e-8) ? (
       0.5*(*k_1)
    )
    : (
       (1.0/2.0)*(*k_1)*(2*(*dx_k1) + 2*(*x_k1))/(*dx_k1) - (-1.0/2.0*(*k_1)*pow((*x_k1), 2) + (1.0/2.0)*(*k_1)*pow((*dx_k1) + (*x_k1), 2))/pow((*dx_k1), 2)
    )));
    _jacGnlnl(1, 5) = (((*dx_k1) < -1.4901161193847656e-8) ? (
       (1.0/2.0)*(*k_1)*(2*(*dx_k1) + 2*(*x_k1))/(*dx_k1) - (-1.0/2.0*(*k_1)*pow((*x_k1), 2) + (1.0/2.0)*(*k_1)*pow((*dx_k1) + (*x_k1), 2))/pow((*dx_k1), 2)
    )
    : (((*dx_k1) < 1.4901161193847656e-8) ? (
       0.5*(*k_1)
    )
    : (
       (1.0/2.0)*(*k_1)*(2*(*dx_k1) + 2*(*x_k1))/(*dx_k1) - (-1.0/2.0*(*k_1)*pow((*x_k1), 2) + (1.0/2.0)*(*k_1)*pow((*dx_k1) + (*x_k1), 2))/pow((*dx_k1), 2)
    )));
    _jacGnlnl(1, 6) = -(((*dx_k2) < -1.4901161193847656e-8) ? (
       (1.0/2.0)*(*k_2)*(2*(*dx_k2) + 2*(*x_k2))/(*dx_k2) - (-1.0/2.0*(*k_2)*pow((*x_k2), 2) + (1.0/2.0)*(*k_2)*pow((*dx_k2) + (*x_k2), 2))/pow((*dx_k2), 2)
    )
    : (((*dx_k2) < 1.4901161193847656e-8) ? (
       0.5*(*k_2)
    )
    : (
       (1.0/2.0)*(*k_2)*(2*(*dx_k2) + 2*(*x_k2))/(*dx_k2) - (-1.0/2.0*(*k_2)*pow((*x_k2), 2) + (1.0/2.0)*(*k_2)*pow((*dx_k2) + (*x_k2), 2))/pow((*dx_k2), 2)
    )));
    _jacGnlnl(2, 6) = (((*dx_k2) < -1.4901161193847656e-8) ? (
       (1.0/2.0)*(*k_2)*(2*(*dx_k2) + 2*(*x_k2))/(*dx_k2) - (-1.0/2.0*(*k_2)*pow((*x_k2), 2) + (1.0/2.0)*(*k_2)*pow((*dx_k2) + (*x_k2), 2))/pow((*dx_k2), 2)
    )
    : (((*dx_k2) < 1.4901161193847656e-8) ? (
       0.5*(*k_2)
    )
    : (
       (1.0/2.0)*(*k_2)*(2*(*dx_k2) + 2*(*x_k2))/(*dx_k2) - (-1.0/2.0*(*k_2)*pow((*x_k2), 2) + (1.0/2.0)*(*k_2)*pow((*dx_k2) + (*x_k2), 2))/pow((*dx_k2), 2)
    )));
    _jacGnlnl(2, 7) = -(((*dx_k3) < -1.4901161193847656e-8) ? (
       (1.0/2.0)*(*k_3)*(2*(*dx_k3) + 2*(*x_k3))/(*dx_k3) - (-1.0/2.0*(*k_3)*pow((*x_k3), 2) + (1.0/2.0)*(*k_3)*pow((*dx_k3) + (*x_k3), 2))/pow((*dx_k3), 2)
    )
    : (((*dx_k3) < 1.4901161193847656e-8) ? (
       0.5*(*k_3)
    )
    : (
       (1.0/2.0)*(*k_3)*(2*(*dx_k3) + 2*(*x_k3))/(*dx_k3) - (-1.0/2.0*(*k_3)*pow((*x_k3), 2) + (1.0/2.0)*(*k_3)*pow((*dx_k3) + (*x_k3), 2))/pow((*dx_k3), 2)
    )));
    _jacGnlnl(3, 7) = (((*dx_k3) < -1.4901161193847656e-8) ? (
       (1.0/2.0)*(*k_3)*(2*(*dx_k3) + 2*(*x_k3))/(*dx_k3) - (-1.0/2.0*(*k_3)*pow((*x_k3), 2) + (1.0/2.0)*(*k_3)*pow((*dx_k3) + (*x_k3), 2))/pow((*dx_k3), 2)
    )
    : (((*dx_k3) < 1.4901161193847656e-8) ? (
       0.5*(*k_3)
    )
    : (
       (1.0/2.0)*(*k_3)*(2*(*dx_k3) + 2*(*x_k3))/(*dx_k3) - (-1.0/2.0*(*k_3)*pow((*x_k3), 2) + (1.0/2.0)*(*k_3)*pow((*dx_k3) + (*x_k3), 2))/pow((*dx_k3), 2)
    )));
    _jacGnlnl(3, 8) = -(((*dx_k4) < -1.4901161193847656e-8) ? (
       (1.0/2.0)*(*k_4)*(2*(*dx_k4) + 2*(*x_k4))/(*dx_k4) - (-1.0/2.0*(*k_4)*pow((*x_k4), 2) + (1.0/2.0)*(*k_4)*pow((*dx_k4) + (*x_k4), 2))/pow((*dx_k4), 2)
    )
    : (((*dx_k4) < 1.4901161193847656e-8) ? (
       0.5*(*k_4)
    )
    : (
       (1.0/2.0)*(*k_4)*(2*(*dx_k4) + 2*(*x_k4))/(*dx_k4) - (-1.0/2.0*(*k_4)*pow((*x_k4), 2) + (1.0/2.0)*(*k_4)*pow((*dx_k4) + (*x_k4), 2))/pow((*dx_k4), 2)
    )));
    _jacGnlnl(4, 8) = (((*dx_k4) < -1.4901161193847656e-8) ? (
       (1.0/2.0)*(*k_4)*(2*(*dx_k4) + 2*(*x_k4))/(*dx_k4) - (-1.0/2.0*(*k_4)*pow((*x_k4), 2) + (1.0/2.0)*(*k_4)*pow((*dx_k4) + (*x_k4), 2))/pow((*dx_k4), 2)
    )
    : (((*dx_k4) < 1.4901161193847656e-8) ? (
       0.5*(*k_4)
    )
    : (
       (1.0/2.0)*(*k_4)*(2*(*dx_k4) + 2*(*x_k4))/(*dx_k4) - (-1.0/2.0*(*k_4)*pow((*x_k4), 2) + (1.0/2.0)*(*k_4)*pow((*dx_k4) + (*x_k4), 2))/pow((*dx_k4), 2)
    )));
    _jacGnlnl(5, 0) = (((*dPi_L1) < -1.4901161193847656e-8) ? (
       (1.0/2.0)*(2*(*Pi_L1) + 2*(*dPi_L1))/((*dPi_L1)*(*m_L1)) - (-1.0/2.0*pow((*Pi_L1), 2)/(*m_L1) + (1.0/2.0)*pow((*Pi_L1) + (*dPi_L1), 2)/(*m_L1))/pow((*dPi_L1), 2)
    )
    : (((*dPi_L1) < 1.4901161193847656e-8) ? (
       0.5/(*m_L1)
    )
    : (
       (1.0/2.0)*(2*(*Pi_L1) + 2*(*dPi_L1))/((*dPi_L1)*(*m_L1)) - (-1.0/2.0*pow((*Pi_L1), 2)/(*m_L1) + (1.0/2.0)*pow((*Pi_L1) + (*dPi_L1), 2)/(*m_L1))/pow((*dPi_L1), 2)
    )));
    _jacGnlnl(5, 1) = -(((*dPi_12) < -1.4901161193847656e-8) ? (
       ((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2) + (2*(*Pi_12) + 2*(*dPi_12))*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)))/(*dPi_12) - (-pow((*Pi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) - (*Pi_12)*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)) + pow((*Pi_12) + (*dPi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + ((*Pi_12) + (*dPi_12))*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)))/pow((*dPi_12), 2)
    )
    : (((*dPi_12) < 1.4901161193847656e-8) ? (
       0.125/(*m_R1) + 0.125/(*m_L2)
    )
    : (
       ((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2) + (2*(*Pi_12) + 2*(*dPi_12))*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)))/(*dPi_12) - (-pow((*Pi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) - (*Pi_12)*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)) + pow((*Pi_12) + (*dPi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + ((*Pi_12) + (*dPi_12))*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)))/pow((*dPi_12), 2)
    )));
    _jacGnlnl(6, 1) = (((*dPi_12) < -1.4901161193847656e-8) ? (
       ((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2) + (2*(*Pi_12) + 2*(*dPi_12))*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)))/(*dPi_12) - (-pow((*Pi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) - (*Pi_12)*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)) + pow((*Pi_12) + (*dPi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + ((*Pi_12) + (*dPi_12))*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)))/pow((*dPi_12), 2)
    )
    : (((*dPi_12) < 1.4901161193847656e-8) ? (
       0.125/(*m_R1) + 0.125/(*m_L2)
    )
    : (
       ((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2) + (2*(*Pi_12) + 2*(*dPi_12))*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)))/(*dPi_12) - (-pow((*Pi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) - (*Pi_12)*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)) + pow((*Pi_12) + (*dPi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + ((*Pi_12) + (*dPi_12))*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)))/pow((*dPi_12), 2)
    )));
    _jacGnlnl(6, 2) = -(((*dPi_23) < -1.4901161193847656e-8) ? (
       ((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3) + (2*(*Pi_23) + 2*(*dPi_23))*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)))/(*dPi_23) - (-pow((*Pi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) - (*Pi_23)*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)) + pow((*Pi_23) + (*dPi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + ((*Pi_23) + (*dPi_23))*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)))/pow((*dPi_23), 2)
    )
    : (((*dPi_23) < 1.4901161193847656e-8) ? (
       0.125/(*m_R2) + 0.125/(*m_L3)
    )
    : (
       ((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3) + (2*(*Pi_23) + 2*(*dPi_23))*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)))/(*dPi_23) - (-pow((*Pi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) - (*Pi_23)*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)) + pow((*Pi_23) + (*dPi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + ((*Pi_23) + (*dPi_23))*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)))/pow((*dPi_23), 2)
    )));
    _jacGnlnl(7, 2) = (((*dPi_23) < -1.4901161193847656e-8) ? (
       ((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3) + (2*(*Pi_23) + 2*(*dPi_23))*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)))/(*dPi_23) - (-pow((*Pi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) - (*Pi_23)*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)) + pow((*Pi_23) + (*dPi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + ((*Pi_23) + (*dPi_23))*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)))/pow((*dPi_23), 2)
    )
    : (((*dPi_23) < 1.4901161193847656e-8) ? (
       0.125/(*m_R2) + 0.125/(*m_L3)
    )
    : (
       ((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3) + (2*(*Pi_23) + 2*(*dPi_23))*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)))/(*dPi_23) - (-pow((*Pi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) - (*Pi_23)*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)) + pow((*Pi_23) + (*dPi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + ((*Pi_23) + (*dPi_23))*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)))/pow((*dPi_23), 2)
    )));
    _jacGnlnl(7, 3) = -(((*dPi_34) < -1.4901161193847656e-8) ? (
       ((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4) + (2*(*Pi_34) + 2*(*dPi_34))*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)))/(*dPi_34) - (-pow((*Pi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) - (*Pi_34)*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)) + pow((*Pi_34) + (*dPi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + ((*Pi_34) + (*dPi_34))*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)))/pow((*dPi_34), 2)
    )
    : (((*dPi_34) < 1.4901161193847656e-8) ? (
       0.125/(*m_R3) + 0.125/(*m_L4)
    )
    : (
       ((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4) + (2*(*Pi_34) + 2*(*dPi_34))*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)))/(*dPi_34) - (-pow((*Pi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) - (*Pi_34)*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)) + pow((*Pi_34) + (*dPi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + ((*Pi_34) + (*dPi_34))*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)))/pow((*dPi_34), 2)
    )));
    _jacGnlnl(8, 3) = (((*dPi_34) < -1.4901161193847656e-8) ? (
       ((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4) + (2*(*Pi_34) + 2*(*dPi_34))*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)))/(*dPi_34) - (-pow((*Pi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) - (*Pi_34)*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)) + pow((*Pi_34) + (*dPi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + ((*Pi_34) + (*dPi_34))*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)))/pow((*dPi_34), 2)
    )
    : (((*dPi_34) < 1.4901161193847656e-8) ? (
       0.125/(*m_R3) + 0.125/(*m_L4)
    )
    : (
       ((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4) + (2*(*Pi_34) + 2*(*dPi_34))*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)))/(*dPi_34) - (-pow((*Pi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) - (*Pi_34)*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)) + pow((*Pi_34) + (*dPi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + ((*Pi_34) + (*dPi_34))*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)))/pow((*dPi_34), 2)
    )));
    _jacGnlnl(8, 4) = -(((*dPi_R4) < -1.4901161193847656e-8) ? (
       (1.0/2.0)*(2*(*Pi_R4) + 2*(*dPi_R4))/((*dPi_R4)*(*m_R4)) - (-1.0/2.0*pow((*Pi_R4), 2)/(*m_R4) + (1.0/2.0)*pow((*Pi_R4) + (*dPi_R4), 2)/(*m_R4))/pow((*dPi_R4), 2)
    )
    : (((*dPi_R4) < 1.4901161193847656e-8) ? (
       0.5/(*m_R4)
    )
    : (
       (1.0/2.0)*(2*(*Pi_R4) + 2*(*dPi_R4))/((*dPi_R4)*(*m_R4)) - (-1.0/2.0*pow((*Pi_R4), 2)/(*m_R4) + (1.0/2.0)*pow((*Pi_R4) + (*dPi_R4), 2)/(*m_R4))/pow((*dPi_R4), 2)
    )));
    };
    void FPUT::dxH_update(){
    _dxH(0, 0) = (((*dPi_L1) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*pow((*Pi_L1), 2)/(*m_L1) + (1.0/2.0)*pow((*Pi_L1) + (*dPi_L1), 2)/(*m_L1))/(*dPi_L1)
    )
    : (((*dPi_L1) < 1.4901161193847656e-8) ? (
       (*Pi_L1)/(*m_L1) + 0.5*(*dPi_L1)/(*m_L1)
    )
    : (
       (-1.0/2.0*pow((*Pi_L1), 2)/(*m_L1) + (1.0/2.0)*pow((*Pi_L1) + (*dPi_L1), 2)/(*m_L1))/(*dPi_L1)
    )));
    _dxH(1, 0) = (((*dPi_12) < -1.4901161193847656e-8) ? (
       (-pow((*Pi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) - (*Pi_12)*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)) + pow((*Pi_12) + (*dPi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + ((*Pi_12) + (*dPi_12))*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)))/(*dPi_12)
    )
    : (((*dPi_12) < 1.4901161193847656e-8) ? (
       (1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2) + 2*(*Pi_12)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + (*dPi_12)*(0.125/(*m_R1) + 0.125/(*m_L2))
    )
    : (
       (-pow((*Pi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) - (*Pi_12)*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)) + pow((*Pi_12) + (*dPi_12), 2)*((1.0/8.0)/(*m_R1) + (1.0/8.0)/(*m_L2)) + ((*Pi_12) + (*dPi_12))*((1.0/2.0)*(*Delta_12)/(*m_R1) - 1.0/2.0*(*Delta_12)/(*m_L2)))/(*dPi_12)
    )));
    _dxH(2, 0) = (((*dPi_23) < -1.4901161193847656e-8) ? (
       (-pow((*Pi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) - (*Pi_23)*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)) + pow((*Pi_23) + (*dPi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + ((*Pi_23) + (*dPi_23))*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)))/(*dPi_23)
    )
    : (((*dPi_23) < 1.4901161193847656e-8) ? (
       (1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3) + 2*(*Pi_23)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + (*dPi_23)*(0.125/(*m_R2) + 0.125/(*m_L3))
    )
    : (
       (-pow((*Pi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) - (*Pi_23)*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)) + pow((*Pi_23) + (*dPi_23), 2)*((1.0/8.0)/(*m_R2) + (1.0/8.0)/(*m_L3)) + ((*Pi_23) + (*dPi_23))*((1.0/2.0)*(*Delta_23)/(*m_R2) - 1.0/2.0*(*Delta_23)/(*m_L3)))/(*dPi_23)
    )));
    _dxH(3, 0) = (((*dPi_34) < -1.4901161193847656e-8) ? (
       (-pow((*Pi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) - (*Pi_34)*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)) + pow((*Pi_34) + (*dPi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + ((*Pi_34) + (*dPi_34))*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)))/(*dPi_34)
    )
    : (((*dPi_34) < 1.4901161193847656e-8) ? (
       (1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4) + 2*(*Pi_34)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + (*dPi_34)*(0.125/(*m_R3) + 0.125/(*m_L4))
    )
    : (
       (-pow((*Pi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) - (*Pi_34)*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)) + pow((*Pi_34) + (*dPi_34), 2)*((1.0/8.0)/(*m_R3) + (1.0/8.0)/(*m_L4)) + ((*Pi_34) + (*dPi_34))*((1.0/2.0)*(*Delta_34)/(*m_R3) - 1.0/2.0*(*Delta_34)/(*m_L4)))/(*dPi_34)
    )));
    _dxH(4, 0) = (((*dPi_R4) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*pow((*Pi_R4), 2)/(*m_R4) + (1.0/2.0)*pow((*Pi_R4) + (*dPi_R4), 2)/(*m_R4))/(*dPi_R4)
    )
    : (((*dPi_R4) < 1.4901161193847656e-8) ? (
       (*Pi_R4)/(*m_R4) + 0.5*(*dPi_R4)/(*m_R4)
    )
    : (
       (-1.0/2.0*pow((*Pi_R4), 2)/(*m_R4) + (1.0/2.0)*pow((*Pi_R4) + (*dPi_R4), 2)/(*m_R4))/(*dPi_R4)
    )));
    _dxH(5, 0) = (((*dx_k1) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_1)*pow((*x_k1), 2) + (1.0/2.0)*(*k_1)*pow((*dx_k1) + (*x_k1), 2))/(*dx_k1)
    )
    : (((*dx_k1) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k1)*(*k_1) + (*k_1)*(*x_k1)
    )
    : (
       (-1.0/2.0*(*k_1)*pow((*x_k1), 2) + (1.0/2.0)*(*k_1)*pow((*dx_k1) + (*x_k1), 2))/(*dx_k1)
    )));
    _dxH(6, 0) = (((*dx_k2) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_2)*pow((*x_k2), 2) + (1.0/2.0)*(*k_2)*pow((*dx_k2) + (*x_k2), 2))/(*dx_k2)
    )
    : (((*dx_k2) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k2)*(*k_2) + (*k_2)*(*x_k2)
    )
    : (
       (-1.0/2.0*(*k_2)*pow((*x_k2), 2) + (1.0/2.0)*(*k_2)*pow((*dx_k2) + (*x_k2), 2))/(*dx_k2)
    )));
    _dxH(7, 0) = (((*dx_k3) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_3)*pow((*x_k3), 2) + (1.0/2.0)*(*k_3)*pow((*dx_k3) + (*x_k3), 2))/(*dx_k3)
    )
    : (((*dx_k3) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k3)*(*k_3) + (*k_3)*(*x_k3)
    )
    : (
       (-1.0/2.0*(*k_3)*pow((*x_k3), 2) + (1.0/2.0)*(*k_3)*pow((*dx_k3) + (*x_k3), 2))/(*dx_k3)
    )));
    _dxH(8, 0) = (((*dx_k4) < -1.4901161193847656e-8) ? (
       (-1.0/2.0*(*k_4)*pow((*x_k4), 2) + (1.0/2.0)*(*k_4)*pow((*dx_k4) + (*x_k4), 2))/(*dx_k4)
    )
    : (((*dx_k4) < 1.4901161193847656e-8) ? (
       0.5*(*dx_k4)*(*k_4) + (*k_4)*(*x_k4)
    )
    : (
       (-1.0/2.0*(*k_4)*pow((*x_k4), 2) + (1.0/2.0)*(*k_4)*pow((*dx_k4) + (*x_k4), 2))/(*dx_k4)
    )));
    };
    void FPUT::z_update(){
    };
    void FPUT::y_update(){
    };
    //==========================================================================
    // Oprations Results Updates
    void FPUT::ud_x_update(){
        _ud_x = (x()) + (dx());
    };
    void FPUT::Fnl_update(){
        _Fnl = Gnl();
    };
    void FPUT::jacFnl_update(){
        _jacFnl = jacGnlnl();
    };
    void FPUT::ijacFnl_update(){
        _ijacFnl = (jacFnl()).inverse();
    };
    void FPUT::save_Fnl_update(){
        _save_Fnl = Fnl();
    };
    void FPUT::res_Fnl_update(){
        _res_Fnl = sqrt((Fnl()).dot(Fnl()));
    };
    void FPUT::step_Fnl_update(){
        _step_Fnl = sqrt(((Fnl()) + ((-1.0)*(save_Fnl()))).dot((Fnl()) + ((-1.0)*(save_Fnl()))));
    };
    void FPUT::ud_vnl_update(){
        _ud_vnl = (vnl()) + ((-1.0)*((ijacFnl())*(Fnl())));
    };
    //==========================================================================
    // Initialization
    void FPUT::init(){    
        //==========================================================================
        // Arguments Initialisation Data
        vector<double> x_data = {0., 0., 0., 0., 0., 0., 0., 0., 0.};
        vector<double> Gnl_data = {0., 0., 0., 0., 0., 0., 0., 0., 0.};
        vector<double> dx_data = {0., 0., 0., 0., 0., 0., 0., 0., 0.};
        vector<double> vnl_data = {0., 0., 0., 0., 0., 0., 0., 0., 0.};
        vector<double> dxH_data = {0., 0., 0., 0., 0., 0., 0., 0., 0.};
        vector<double> w_data = {};
        vector<double> u_data = {};
        vector<double> p_data = {};
        vector<double> o_data = {0., 0., 0., 0., 0., 0.};
        //==========================================================================
        // Arguments Initialisation
        set_x(x_data);
        set_Gnl(Gnl_data);
        set_dx(dx_data);
        set_vnl(vnl_data);
        set_dxH(dxH_data);
        set_w(w_data);
        set_u(u_data);
        set_p(p_data);
        set_o(o_data);
        //==========================================================================
        // Functions Results Initialisation
        ud_o_update();
        Gnl_update();
        jacGnlnl_update();
        dxH_update();
        z_update();
        y_update();
        //==========================================================================
        // Operations Results Initialisation
        ud_x_update();
        Fnl_update();
        res_Fnl_update();
        save_Fnl_update();
        jacFnl_update();
        ijacFnl_update();
        ud_vnl_update();
        step_Fnl_update();
    };